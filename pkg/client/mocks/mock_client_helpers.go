// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/aks-tls-bootstrap-client/pkg/client (interfaces: ClientHelpers)

// Package mocks is a generated GoMock package.
package mocks

import (
	tls "crypto/tls"
	reflect "reflect"

	datamodel "github.com/Azure/aks-tls-bootstrap-client/pkg/datamodel"
	gomock "go.uber.org/mock/gomock"
)

// MockClientHelpers is a mock of ClientHelpers interface.
type MockClientHelpers struct {
	ctrl     *gomock.Controller
	recorder *MockClientHelpersMockRecorder
}

// MockClientHelpersMockRecorder is the mock recorder for MockClientHelpers.
type MockClientHelpersMockRecorder struct {
	mock *MockClientHelpers
}

// NewMockClientHelpers creates a new mock instance.
func NewMockClientHelpers(ctrl *gomock.Controller) *MockClientHelpers {
	mock := &MockClientHelpers{ctrl: ctrl}
	mock.recorder = &MockClientHelpersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientHelpers) EXPECT() *MockClientHelpersMockRecorder {
	return m.recorder
}

// GetServerURL mocks base method.
func (m *MockClientHelpers) GetServerURL(arg0 *datamodel.ExecCredential) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerURL indicates an expected call of GetServerURL.
func (mr *MockClientHelpersMockRecorder) GetServerURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerURL", reflect.TypeOf((*MockClientHelpers)(nil).GetServerURL), arg0)
}

// GetTLSConfig mocks base method.
func (m *MockClientHelpers) GetTLSConfig(arg0 []byte, arg1 string, arg2 bool) (*tls.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLSConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*tls.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLSConfig indicates an expected call of GetTLSConfig.
func (mr *MockClientHelpersMockRecorder) GetTLSConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLSConfig", reflect.TypeOf((*MockClientHelpers)(nil).GetTLSConfig), arg0, arg1, arg2)
}

// LoadAzureJSON mocks base method.
func (m *MockClientHelpers) LoadAzureJSON() (*datamodel.AzureConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAzureJSON")
	ret0, _ := ret[0].(*datamodel.AzureConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAzureJSON indicates an expected call of LoadAzureJSON.
func (mr *MockClientHelpersMockRecorder) LoadAzureJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAzureJSON", reflect.TypeOf((*MockClientHelpers)(nil).LoadAzureJSON))
}

// LoadExecCredential mocks base method.
func (m *MockClientHelpers) LoadExecCredential() (*datamodel.ExecCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadExecCredential")
	ret0, _ := ret[0].(*datamodel.ExecCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadExecCredential indicates an expected call of LoadExecCredential.
func (mr *MockClientHelpersMockRecorder) LoadExecCredential() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadExecCredential", reflect.TypeOf((*MockClientHelpers)(nil).LoadExecCredential))
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/aks-tls-bootstrap-client/pkg/client (interfaces: AadClient,TokenAcquirer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	base "github.com/AzureAD/microsoft-authentication-library-for-go/apps/confidential"
	gomock "go.uber.org/mock/gomock"
)

// MockAadClient is a mock of AadClient interface.
type MockAadClient struct {
	ctrl     *gomock.Controller
	recorder *MockAadClientMockRecorder
}

// MockAadClientMockRecorder is the mock recorder for MockAadClient.
type MockAadClientMockRecorder struct {
	mock *MockAadClient
}

// NewMockAadClient creates a new mock instance.
func NewMockAadClient(ctrl *gomock.Controller) *MockAadClient {
	mock := &MockAadClient{ctrl: ctrl}
	mock.recorder = &MockAadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAadClient) EXPECT() *MockAadClientMockRecorder {
	return m.recorder
}

// GetAadToken mocks base method.
func (m *MockAadClient) GetAadToken(arg0 context.Context, arg1, arg2, arg3, arg4 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAadToken", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAadToken indicates an expected call of GetAadToken.
func (mr *MockAadClientMockRecorder) GetAadToken(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAadToken", reflect.TypeOf((*MockAadClient)(nil).GetAadToken), arg0, arg1, arg2, arg3, arg4)
}

// MockTokenAcquirer is a mock of TokenAcquirer interface.
type MockTokenAcquirer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenAcquirerMockRecorder
}

// MockTokenAcquirerMockRecorder is the mock recorder for MockTokenAcquirer.
type MockTokenAcquirerMockRecorder struct {
	mock *MockTokenAcquirer
}

// NewMockTokenAcquirer creates a new mock instance.
func NewMockTokenAcquirer(ctrl *gomock.Controller) *MockTokenAcquirer {
	mock := &MockTokenAcquirer{ctrl: ctrl}
	mock.recorder = &MockTokenAcquirerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenAcquirer) EXPECT() *MockTokenAcquirerMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockTokenAcquirer) Acquire(arg0 context.Context, arg1 []string) (base.AuthResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", arg0, arg1)
	ret0, _ := ret[0].(base.AuthResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockTokenAcquirerMockRecorder) Acquire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockTokenAcquirer)(nil).Acquire), arg0, arg1)
}

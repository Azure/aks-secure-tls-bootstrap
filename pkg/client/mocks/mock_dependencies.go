// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/aks-tls-bootstrap-client/pkg/client/dependencies (interfaces: AcquireTokenClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	base "github.com/AzureAD/microsoft-authentication-library-for-go/apps/confidential"
	gomock "go.uber.org/mock/gomock"
)

// MockAcquireTokenClient is a mock of AcquireTokenClient interface.
type MockAcquireTokenClient struct {
	ctrl     *gomock.Controller
	recorder *MockAcquireTokenClientMockRecorder
}

// MockAcquireTokenClientMockRecorder is the mock recorder for MockAcquireTokenClient.
type MockAcquireTokenClientMockRecorder struct {
	mock *MockAcquireTokenClient
}

// NewMockAcquireTokenClient creates a new mock instance.
func NewMockAcquireTokenClient(ctrl *gomock.Controller) *MockAcquireTokenClient {
	mock := &MockAcquireTokenClient{ctrl: ctrl}
	mock.recorder = &MockAcquireTokenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcquireTokenClient) EXPECT() *MockAcquireTokenClientMockRecorder {
	return m.recorder
}

// AcquireTokenByCredential mocks base method.
func (m *MockAcquireTokenClient) AcquireTokenByCredential(arg0 context.Context, arg1 []string) (base.AuthResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireTokenByCredential", arg0, arg1)
	ret0, _ := ret[0].(base.AuthResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireTokenByCredential indicates an expected call of AcquireTokenByCredential.
func (mr *MockAcquireTokenClientMockRecorder) AcquireTokenByCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireTokenByCredential", reflect.TypeOf((*MockAcquireTokenClient)(nil).AcquireTokenByCredential), arg0, arg1)
}

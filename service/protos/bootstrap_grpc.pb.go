// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: protos/bootstrap.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecureTLSBootstrapService_GetNonce_FullMethodName      = "/azure.aks.securetlsbootstrap.SecureTLSBootstrapService/GetNonce"
	SecureTLSBootstrapService_GetCredential_FullMethodName = "/azure.aks.securetlsbootstrap.SecureTLSBootstrapService/GetCredential"
	SecureTLSBootstrapService_GetToken_FullMethodName      = "/azure.aks.securetlsbootstrap.SecureTLSBootstrapService/GetToken"
)

// SecureTLSBootstrapServiceClient is the client API for SecureTLSBootstrapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecureTLSBootstrapServiceClient interface {
	// Step 1 of retrieving a kubelet client credential; generates a nonce to be used by the
	// client when requesting attested data from IMDS.
	GetNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*NonceResponse, error)
	// Step 2 of retrieving a kubelet client credential; validates the attested data and the
	// nonce, then generates and returns the bootstrap token to the client.
	GetCredential(ctx context.Context, in *CredentialRequest, opts ...grpc.CallOption) (*CredentialResponse, error)
	// DEPRECATED: Step 2 of retrieving a bootstrap token; validates the attested data and the
	// nonce, then generates and returns the bootstrap token to the client.
	GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type secureTLSBootstrapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecureTLSBootstrapServiceClient(cc grpc.ClientConnInterface) SecureTLSBootstrapServiceClient {
	return &secureTLSBootstrapServiceClient{cc}
}

func (c *secureTLSBootstrapServiceClient) GetNonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*NonceResponse, error) {
	out := new(NonceResponse)
	err := c.cc.Invoke(ctx, SecureTLSBootstrapService_GetNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureTLSBootstrapServiceClient) GetCredential(ctx context.Context, in *CredentialRequest, opts ...grpc.CallOption) (*CredentialResponse, error) {
	out := new(CredentialResponse)
	err := c.cc.Invoke(ctx, SecureTLSBootstrapService_GetCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureTLSBootstrapServiceClient) GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, SecureTLSBootstrapService_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecureTLSBootstrapServiceServer is the server API for SecureTLSBootstrapService service.
// All implementations must embed UnimplementedSecureTLSBootstrapServiceServer
// for forward compatibility
type SecureTLSBootstrapServiceServer interface {
	// Step 1 of retrieving a kubelet client credential; generates a nonce to be used by the
	// client when requesting attested data from IMDS.
	GetNonce(context.Context, *NonceRequest) (*NonceResponse, error)
	// Step 2 of retrieving a kubelet client credential; validates the attested data and the
	// nonce, then generates and returns the bootstrap token to the client.
	GetCredential(context.Context, *CredentialRequest) (*CredentialResponse, error)
	// DEPRECATED: Step 2 of retrieving a bootstrap token; validates the attested data and the
	// nonce, then generates and returns the bootstrap token to the client.
	GetToken(context.Context, *TokenRequest) (*TokenResponse, error)
	mustEmbedUnimplementedSecureTLSBootstrapServiceServer()
}

// UnimplementedSecureTLSBootstrapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecureTLSBootstrapServiceServer struct {
}

func (UnimplementedSecureTLSBootstrapServiceServer) GetNonce(context.Context, *NonceRequest) (*NonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonce not implemented")
}
func (UnimplementedSecureTLSBootstrapServiceServer) GetCredential(context.Context, *CredentialRequest) (*CredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedSecureTLSBootstrapServiceServer) GetToken(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedSecureTLSBootstrapServiceServer) mustEmbedUnimplementedSecureTLSBootstrapServiceServer() {
}

// UnsafeSecureTLSBootstrapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecureTLSBootstrapServiceServer will
// result in compilation errors.
type UnsafeSecureTLSBootstrapServiceServer interface {
	mustEmbedUnimplementedSecureTLSBootstrapServiceServer()
}

func RegisterSecureTLSBootstrapServiceServer(s grpc.ServiceRegistrar, srv SecureTLSBootstrapServiceServer) {
	s.RegisterService(&SecureTLSBootstrapService_ServiceDesc, srv)
}

func _SecureTLSBootstrapService_GetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureTLSBootstrapServiceServer).GetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureTLSBootstrapService_GetNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureTLSBootstrapServiceServer).GetNonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureTLSBootstrapService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureTLSBootstrapServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureTLSBootstrapService_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureTLSBootstrapServiceServer).GetCredential(ctx, req.(*CredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureTLSBootstrapService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureTLSBootstrapServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureTLSBootstrapService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureTLSBootstrapServiceServer).GetToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecureTLSBootstrapService_ServiceDesc is the grpc.ServiceDesc for SecureTLSBootstrapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecureTLSBootstrapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "azure.aks.securetlsbootstrap.SecureTLSBootstrapService",
	HandlerType: (*SecureTLSBootstrapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNonce",
			Handler:    _SecureTLSBootstrapService_GetNonce_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _SecureTLSBootstrapService_GetCredential_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _SecureTLSBootstrapService_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/bootstrap.proto",
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/aks-secure-tls-bootstrap/client/internal/imds (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -copyright_file=../../../hack/copyright_header.txt -destination=./mocks/mock_imds.go -package=mocks github.com/Azure/aks-secure-tls-bootstrap/client/internal/imds Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	imds "github.com/Azure/aks-secure-tls-bootstrap/client/internal/imds"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAttestedData mocks base method.
func (m *MockClient) GetAttestedData(ctx context.Context, nonce string) (*imds.VMAttestedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttestedData", ctx, nonce)
	ret0, _ := ret[0].(*imds.VMAttestedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttestedData indicates an expected call of GetAttestedData.
func (mr *MockClientMockRecorder) GetAttestedData(ctx, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttestedData", reflect.TypeOf((*MockClient)(nil).GetAttestedData), ctx, nonce)
}

// GetInstanceData mocks base method.
func (m *MockClient) GetInstanceData(ctx context.Context) (*imds.VMInstanceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceData", ctx)
	ret0, _ := ret[0].(*imds.VMInstanceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceData indicates an expected call of GetInstanceData.
func (mr *MockClientMockRecorder) GetInstanceData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceData", reflect.TypeOf((*MockClient)(nil).GetInstanceData), ctx)
}

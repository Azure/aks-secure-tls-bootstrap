// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockfileReader is a mock of fileReader interface.
type MockfileReader struct {
	ctrl     *gomock.Controller
	recorder *MockfileReaderMockRecorder
}

// MockfileReaderMockRecorder is the mock recorder for MockfileReader.
type MockfileReaderMockRecorder struct {
	mock *MockfileReader
}

// NewMockfileReader creates a new mock instance.
func NewMockfileReader(ctrl *gomock.Controller) *MockfileReader {
	mock := &MockfileReader{ctrl: ctrl}
	mock.recorder = &MockfileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileReader) EXPECT() *MockfileReaderMockRecorder {
	return m.recorder
}

// ReadDir mocks base method.
func (m *MockfileReader) ReadDir(name string) ([]os.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", name)
	ret0, _ := ret[0].([]os.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockfileReaderMockRecorder) ReadDir(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockfileReader)(nil).ReadDir), name)
}

// ReadFile mocks base method.
func (m *MockfileReader) ReadFile(name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockfileReaderMockRecorder) ReadFile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockfileReader)(nil).ReadFile), name)
}
